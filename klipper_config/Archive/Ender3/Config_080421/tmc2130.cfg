# Configure a TMC2130 stepper motor driver via SPI bus. To use this
# feature, define a config section with a "tmc2130" prefix followed by
# the name of the corresponding stepper config section (for example,
# "[tmc2130 stepper_x]").

# Hint
#	A chopper frequency in the range of 16 kHz to 30 kHz gives a good result for most motors when
#	using spreadCycle. A higher frequency leads to increased switching losses.
[tmc2130 stepper_x]
cs_pin : PC10
spi_bus: spi3
#   The pin corresponding to the TMC2130 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
microsteps:16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
#run_current:0.76
run_current: 0.580
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:0.38
hold_current: 0.500
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
stealthchop_threshold: 250
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#	Operate the motor within your application when exploring stealthChop. Motor performance often is
#	better with a mechanical load, because it prevents the motor from stalling due mechanical oscillations
#	which can occur without load.
#driver_toff: 4
#	General enable for the motor driver, the actual value does not influence stealthChop
#	Sets the slow decay time (off time). This setting also limits the maximum chopper frequency. 
#	For operation with stealthChop, this parameter is not used, but it is required to enable the motor. In case of operation with stealthChop only, any setting is OK. 
#	Setting this parameter to zero completely disables all driver transistors and the motor can free-wheel.

#	Hint 
#		Highest motor velocities sometimes benefit from setting TOFF to 1 or 2 and a short TBL of 1 or 0. 
#		Set TOFF to a low value, so that the chopper cycle is ended, before the next sync clock pulse occurs. 
#			Set SYNC for the double desired chopper frequency for chm=0, for the desired base chopper frequency for chm=1.
 
#	0 Driver off, 1…15  off time setting NCLK= 12 + 32*TOFF (1 will work with minimum blank time of 24 clocks) 
#	0 Driver off, 1 … 15 Driver enabled 
#driver_hstrt: 0
#driver_hstrt: 6
#	Hysteresis start setting. This value is an offset from the hysteresis end value HEND.
#	HSTRT=1…8 This value adds to HEND
#driver_hend: 7
#driver_hend: 0
#	Hysteresis end setting. Sets the hysteresis end value after a number of decrements.
#	The sum HSTRT+HEND must be ≤16. At a current setting of max. 30 (amplitude reduced to 240),
#	the sum is not limited. 
#	-3…-1: negative HEND, 0: zero HEND, 1…12: positive HEND
#	Hint
#		Effective HEND+HSTRT ≤ 16.
#		Hysteresis decrement is done each 16 clocks
#		Choosing a low to medium default value for the hysteresis (for example, effective hysteresis = 4)
#		In order to take advantage of the variable hysteresis, we can set most of the value to the
#		HSTRT, i.e.4, and the remaining 1 to hysteresis end.
#		The resulting configuration register values are as follows:
#			HEND=0 (sets an effective end value of -3)
#			HSTRT=6 (sets an effective start value of hysteresis end +7: 7-3=4)
#driver_TBL: 1
#	Comparator blank time. This time needs to safely cover the switching event and the duration of the
#	ringing on the sense resistor. Choose a setting of 1 or 2 for typical applications. For higher
#	capacitive loads, 3 may be required. Lower settings allow stealthChop to regulate down to
#	lower coil current values.
#		0 16 tCLK, 1 24 tCLK, 2 36 tCLK, 3 54 tCLK
#driver_IHOLDDELAY: 8
#	Allows smooth current reduction from run current to hold current. IHOLDDELAY controls the number of clock cycles for motor power down after
#	TPOWERDOWN in increments of 2^18 clocks:
#		0=instant power down, 1..15: Current reduction delay per current step in multiple of 2^18 clocks.
#	Example: When using IRUN=31 and IHOLD=16, 15 current steps are required for hold current reduction. A IHOLDDELAY setting of 4 thus results
#		in a power down time of 4*15*2^18 clock cycles,i.e. roughly one second at 16MHz
#driver_TPOWERDOWN: 0
#	TPOWERDOWN sets the delay time after stand still (stst) of the motor to motor current power down. Time range is about 0 to 4 seconds.
#	0…((2^8)-1) * 2^18 tCLK
#driver_PWM_AMPL: 128
#	User defined PWM amplitude (offset) for velocity based scaling or amplitude limit for re-entry into stealthChop mode when pwm_autoscale=1.
#	0 ... 255
#driver_PWM_GRAD: 4
#	User defined PWM amplitude (gradient) for velocity based scaling or regulation loop gradient when pwm_autoscale=1.
#	1 … 15 With pwm_autoscale=1, 0 … 255 With pwm_autoscale=0
#driver_pwm_freq: 0
#	PWM frequency selection. Use the lowest setting giving good results. The frequency measured at each of the chopper outputs is half of the
#	effective chopper frequency fPWM.
#	0 fPWM=2/1024 fCLK, 1 fPWM=2/683 fCLK, 2 fPWM=2/512 fCLK, 3 fPWM=2/410 fCL
#driver_pwm_autoscale: True
#	Enable automatic current scaling using current measurement or use forward controlled velocity based mode.
#	0 Forward controlled mode, 1 Automatic scaling with current regulator
#driver_SGT: 5
#	This signed value controls the stallGuard2 threshold level for stall detection and sets the optimum
#	measurement range for readout. A lower value gives a higher sensitivity. Zero is the starting value
#	working with most motors. A higher value makes stallGuard2 less sensitive and requires more torque to indicate a stall.
#	0 indifferent value, +1… +63 less sensitivity, -1… -64 higher sensitivity

#   Set the given register during the configuration of the TMC2130
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag1_pin: P1.29
#   The micro-controller pin attached to the DIAG1 line of the TMC2130
#   chip. Setting this creates a "tmc2130_stepper_x:virtual_endstop"
#   virtual pin which may be used as the stepper's endstop_pin. Doing
#   this enables "sensorless homing". (Be sure to also set driver_SGT
#   to an appropriate sensitivity value.) The default is to not enable
#   sensorless homing. See docs/Sensorless_Homing.md for details on how
#   to configure this.


# Configure a TMC2130 stepper motor driver via SPI bus. To use this
# feature, define a config section with a "tmc2130" prefix followed by
# the name of the corresponding stepper config section (for example,
# "[tmc2130 stepper_x]").
[tmc2130 stepper_y]
cs_pin : PC11
spi_bus: spi3
#   The pin corresponding to the TMC2130 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
microsteps:16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
#run_current:0.76
run_current: 0.580
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:0.38
hold_current: 0.500
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
stealthchop_threshold: 250
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_toff: 4
#	General enable for the motor driver, the actual value does not influence stealthChop
#	Sets the slow decay time (off time). This setting also limits the maximum chopper frequency. 
#	For operation with stealthChop, this parameter is not used, but it is required to enable the motor. In case of operation with stealthChop only, any setting is OK. 
#	Setting this parameter to zero completely disables all driver transistors and the motor can free-wheel.

#	Hint 
#		Highest motor velocities sometimes benefit from setting TOFF to 1 or 2 and a short TBL of 1 or 0. 
#		Set TOFF to a low value, so that the chopper cycle is ended, before the next sync clock pulse occurs. 
#			Set SYNC for the double desired chopper frequency for chm=0, for the desired base chopper frequency for chm=1.
 
#	0 Driver off, 1…15  off time setting NCLK= 12 + 32*TOFF (1 will work with minimum blank time of 24 clocks) 
#	0 Driver off, 1 … 15 Driver enabled 
#driver_hstrt: 0
#driver_hstrt: 6
#	Hysteresis start setting. This value is an offset from the hysteresis end value HEND.
#	HSTRT=1…8 This value adds to HEND
#driver_hend: 7
#driver_hend: 0
#	Hysteresis end setting. Sets the hysteresis end value after a number of decrements.
#	The sum HSTRT+HEND must be ≤16. At a current setting of max. 30 (amplitude reduced to 240),
#	the sum is not limited. 
#	-3…-1: negative HEND, 0: zero HEND, 1…12: positive HEND
#	Hint
#		Effective HEND+HSTRT ≤ 16.
#		Hysteresis decrement is done each 16 clocks
#		Choosing a low to medium default value for the hysteresis (for example, effective hysteresis = 4)
#		In order to take advantage of the variable hysteresis, we can set most of the value to the
#		HSTRT, i.e.4, and the remaining 1 to hysteresis end.
#		The resulting configuration register values are as follows:
#			HEND=0 (sets an effective end value of -3)
#			HSTRT=6 (sets an effective start value of hysteresis end +7: 7-3=4)
#driver_TBL: 1
#	Comparator blank time. This time needs to safely cover the switching event and the duration of the
#	ringing on the sense resistor. Choose a setting of 1 or 2 for typical applications. For higher
#	capacitive loads, 3 may be required. Lower settings allow stealthChop to regulate down to
#	lower coil current values.
#		0 16 tCLK, 1 24 tCLK, 2 36 tCLK, 3 54 tCLK
#driver_IHOLDDELAY: 8
#	Allows smooth current reduction from run current to hold current. IHOLDDELAY controls the number of clock cycles for motor power down after
#	TPOWERDOWN in increments of 2^18 clocks:
#		0=instant power down, 1..15: Current reduction delay per current step in multiple of 2^18 clocks.
#	Example: When using IRUN=31 and IHOLD=16, 15 current steps are required for hold current reduction. A IHOLDDELAY setting of 4 thus results
#		in a power down time of 4*15*2^18 clock cycles,i.e. roughly one second at 16MHz
#driver_TPOWERDOWN: 0
#	TPOWERDOWN sets the delay time after stand still (stst) of the motor to motor current power down. Time range is about 0 to 4 seconds.
#	0…((2^8)-1) * 2^18 tCLK
#driver_PWM_AMPL: 128
#	User defined PWM amplitude (offset) for velocity based scaling or amplitude limit for re-entry into stealthChop mode when pwm_autoscale=1.
#	0 ... 255
#driver_PWM_GRAD: 4
#	User defined PWM amplitude (gradient) for velocity based scaling or regulation loop gradient when pwm_autoscale=1.
#	1 … 15 With pwm_autoscale=1, 0 … 255 With pwm_autoscale=0
#driver_pwm_freq: 0
#	PWM frequency selection. Use the lowest setting giving good results. The frequency measured at each of the chopper outputs is half of the
#	effective chopper frequency fPWM.
#	0 fPWM=2/1024 fCLK, 1 fPWM=2/683 fCLK, 2 fPWM=2/512 fCLK, 3 fPWM=2/410 fCL
#driver_pwm_autoscale: True
#	Enable automatic current scaling using current measurement or use forward controlled velocity based mode.
#	0 Forward controlled mode, 1 Automatic scaling with current regulator
#driver_SGT: 5
#	This signed value controls the stallGuard2 threshold level for stall detection and sets the optimum
#	measurement range for readout. A lower value gives a higher sensitivity. Zero is the starting value
#	working with most motors. A higher value makes stallGuard2 less sensitive and requires more torque to indicate a stall.
#	0 indifferent value, +1… +63 less sensitivity, -1… -64 higher sensitivity

#   Set the given register during the configuration of the TMC2130
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag1_pin: P1.27
#   The micro-controller pin attached to the DIAG1 line of the TMC2130
#   chip. Setting this creates a "tmc2130_stepper_x:virtual_endstop"
#   virtual pin which may be used as the stepper's endstop_pin. Doing
#   this enables "sensorless homing". (Be sure to also set driver_SGT
#   to an appropriate sensitivity value.) The default is to not enable
#   sensorless homing. See docs/Sensorless_Homing.md for details on how
#   to configure this.

# Configure a TMC2130 stepper motor driver via SPI bus. To use this
# feature, define a config section with a "tmc2130" prefix followed by
# the name of the corresponding stepper config section (for example,
# "[tmc2130 stepper_x]").
[tmc2130 stepper_z]
cs_pin : PC12
spi_bus: spi3
#   The pin corresponding to the TMC2130 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
microsteps:16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
#run_current:0.76
run_current:0.580
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current:0.450
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
stealthchop_threshold: 20
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_toff: 4
#	General enable for the motor driver, the actual value does not influence stealthChop
#	Sets the slow decay time (off time). This setting also limits the maximum chopper frequency. 
#	For operation with stealthChop, this parameter is not used, but it is required to enable the motor. In case of operation with stealthChop only, any setting is OK. 
#	Setting this parameter to zero completely disables all driver transistors and the motor can free-wheel.

#	Hint 
#		Highest motor velocities sometimes benefit from setting TOFF to 1 or 2 and a short TBL of 1 or 0. 
#		Set TOFF to a low value, so that the chopper cycle is ended, before the next sync clock pulse occurs. 
#			Set SYNC for the double desired chopper frequency for chm=0, for the desired base chopper frequency for chm=1.
 
#	0 Driver off, 1…15  off time setting NCLK= 12 + 32*TOFF (1 will work with minimum blank time of 24 clocks) 
#	0 Driver off, 1 … 15 Driver enabled 
#driver_hstrt: 0
#driver_hstrt: 6
#	Hysteresis start setting. This value is an offset from the hysteresis end value HEND.
#	HSTRT=1…8 This value adds to HEND
#driver_hend: 7
#driver_hend: 0
#	Hysteresis end setting. Sets the hysteresis end value after a number of decrements.
#	The sum HSTRT+HEND must be ≤16. At a current setting of max. 30 (amplitude reduced to 240),
#	the sum is not limited. 
#	-3…-1: negative HEND, 0: zero HEND, 1…12: positive HEND
#	Hint
#		Effective HEND+HSTRT ≤ 16.
#		Hysteresis decrement is done each 16 clocks
#		Choosing a low to medium default value for the hysteresis (for example, effective hysteresis = 4)
#		In order to take advantage of the variable hysteresis, we can set most of the value to the
#		HSTRT, i.e.4, and the remaining 1 to hysteresis end.
#		The resulting configuration register values are as follows:
#			HEND=0 (sets an effective end value of -3)
#			HSTRT=6 (sets an effective start value of hysteresis end +7: 7-3=4)
#driver_TBL: 1
#	Comparator blank time. This time needs to safely cover the switching event and the duration of the
#	ringing on the sense resistor. Choose a setting of 1 or 2 for typical applications. For higher
#	capacitive loads, 3 may be required. Lower settings allow stealthChop to regulate down to
#	lower coil current values.
#		0 16 tCLK, 1 24 tCLK, 2 36 tCLK, 3 54 tCLK
#driver_IHOLDDELAY: 8
#	Allows smooth current reduction from run current to hold current. IHOLDDELAY controls the number of clock cycles for motor power down after
#	TPOWERDOWN in increments of 2^18 clocks:
#		0=instant power down, 1..15: Current reduction delay per current step in multiple of 2^18 clocks.
#	Example: When using IRUN=31 and IHOLD=16, 15 current steps are required for hold current reduction. A IHOLDDELAY setting of 4 thus results
#		in a power down time of 4*15*2^18 clock cycles,i.e. roughly one second at 16MHz
#driver_TPOWERDOWN: 0
#	TPOWERDOWN sets the delay time after stand still (stst) of the motor to motor current power down. Time range is about 0 to 4 seconds.
#	0…((2^8)-1) * 2^18 tCLK
#driver_PWM_AMPL: 128
#	User defined PWM amplitude (offset) for velocity based scaling or amplitude limit for re-entry into stealthChop mode when pwm_autoscale=1.
#	0 ... 255
#driver_PWM_GRAD: 4
#	User defined PWM amplitude (gradient) for velocity based scaling or regulation loop gradient when pwm_autoscale=1.
#	1 … 15 With pwm_autoscale=1, 0 … 255 With pwm_autoscale=0
#driver_pwm_freq: 0
#	PWM frequency selection. Use the lowest setting giving good results. The frequency measured at each of the chopper outputs is half of the
#	effective chopper frequency fPWM.
#	0 fPWM=2/1024 fCLK, 1 fPWM=2/683 fCLK, 2 fPWM=2/512 fCLK, 3 fPWM=2/410 fCL
#driver_pwm_autoscale: True
#	Enable automatic current scaling using current measurement or use forward controlled velocity based mode.
#	0 Forward controlled mode, 1 Automatic scaling with current regulator
#driver_SGT: 5
#	This signed value controls the stallGuard2 threshold level for stall detection and sets the optimum
#	measurement range for readout. A lower value gives a higher sensitivity. Zero is the starting value
#	working with most motors. A higher value makes stallGuard2 less sensitive and requires more torque to indicate a stall.
#	0 indifferent value, +1… +63 less sensitivity, -1… -64 higher sensitivity

#   Set the given register during the configuration of the TMC2130
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag1_pin: P1.25
#   The micro-controller pin attached to the DIAG1 line of the TMC2130
#   chip. Setting this creates a "tmc2130_stepper_x:virtual_endstop"
#   virtual pin which may be used as the stepper's endstop_pin. Doing
#   this enables "sensorless homing". (Be sure to also set driver_SGT
#   to an appropriate sensitivity value.) The default is to not enable
#   sensorless homing. See docs/Sensorless_Homing.md for details on how
#   to configure this.


# Configure a TMC2130 stepper motor driver via SPI bus. To use this
# feature, define a config section with a "tmc2130" prefix followed by
# the name of the corresponding stepper config section (for example,
# "[tmc2130 stepper_x]").
#[tmc2130 extruder]
#cs_pin : PD2
#spi_bus: spi3
#   The pin corresponding to the TMC2130 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
#microsteps:16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
#interpolate: true
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
#run_current:0.650
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:0.500
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
#stealthchop_threshold: 5
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_toff: 4
#	General enable for the motor driver, the actual value does not influence stealthChop
#	Sets the slow decay time (off time). This setting also limits the maximum chopper frequency. 
#	For operation with stealthChop, this parameter is not used, but it is required to enable the motor. In case of operation with stealthChop only, any setting is OK. 
#	Setting this parameter to zero completely disables all driver transistors and the motor can free-wheel.

#	Hint 
#		Highest motor velocities sometimes benefit from setting TOFF to 1 or 2 and a short TBL of 1 or 0. 
#		Set TOFF to a low value, so that the chopper cycle is ended, before the next sync clock pulse occurs. 
#			Set SYNC for the double desired chopper frequency for chm=0, for the desired base chopper frequency for chm=1.
 
#	0 Driver off, 1…15  off time setting NCLK= 12 + 32*TOFF (1 will work with minimum blank time of 24 clocks) 
#	0 Driver off, 1 … 15 Driver enabled 
#driver_hstrt: 0
#driver_hstrt: 6
#	Hysteresis start setting. This value is an offset from the hysteresis end value HEND.
#	HSTRT=1…8 This value adds to HEND
#driver_hend: 7
#driver_hend: 0
#	Hysteresis end setting. Sets the hysteresis end value after a number of decrements.
#	The sum HSTRT+HEND must be ≤16. At a current setting of max. 30 (amplitude reduced to 240),
#	the sum is not limited. 
#	-3…-1: negative HEND, 0: zero HEND, 1…12: positive HEND
#	Hint
#		Effective HEND+HSTRT ≤ 16.
#		Hysteresis decrement is done each 16 clocks
#		Choosing a low to medium default value for the hysteresis (for example, effective hysteresis = 4)
#		In order to take advantage of the variable hysteresis, we can set most of the value to the
#		HSTRT, i.e.4, and the remaining 1 to hysteresis end.
#		The resulting configuration register values are as follows:
#			HEND=0 (sets an effective end value of -3)
#			HSTRT=6 (sets an effective start value of hysteresis end +7: 7-3=4)
#driver_TBL: 1
#	Comparator blank time. This time needs to safely cover the switching event and the duration of the
#	ringing on the sense resistor. Choose a setting of 1 or 2 for typical applications. For higher
#	capacitive loads, 3 may be required. Lower settings allow stealthChop to regulate down to
#	lower coil current values.
#		0 16 tCLK, 1 24 tCLK, 2 36 tCLK, 3 54 tCLK
#driver_IHOLDDELAY: 8
#	Allows smooth current reduction from run current to hold current. IHOLDDELAY controls the number of clock cycles for motor power down after
#	TPOWERDOWN in increments of 2^18 clocks:
#		0=instant power down, 1..15: Current reduction delay per current step in multiple of 2^18 clocks.
#	Example: When using IRUN=31 and IHOLD=16, 15 current steps are required for hold current reduction. A IHOLDDELAY setting of 4 thus results
#		in a power down time of 4*15*2^18 clock cycles,i.e. roughly one second at 16MHz
#driver_TPOWERDOWN: 0
#	TPOWERDOWN sets the delay time after stand still (stst) of the motor to motor current power down. Time range is about 0 to 4 seconds.
#	0…((2^8)-1) * 2^18 tCLK
#driver_PWM_AMPL: 128
#	User defined PWM amplitude (offset) for velocity based scaling or amplitude limit for re-entry into stealthChop mode when pwm_autoscale=1.
#	0 ... 255
#driver_PWM_GRAD: 4
#	User defined PWM amplitude (gradient) for velocity based scaling or regulation loop gradient when pwm_autoscale=1.
#	1 … 15 With pwm_autoscale=1, 0 … 255 With pwm_autoscale=0
#driver_pwm_freq: 0
#	PWM frequency selection. Use the lowest setting giving good results. The frequency measured at each of the chopper outputs is half of the
#	effective chopper frequency fPWM.
#	0 fPWM=2/1024 fCLK, 1 fPWM=2/683 fCLK, 2 fPWM=2/512 fCLK, 3 fPWM=2/410 fCL
#driver_pwm_autoscale: True
#	Enable automatic current scaling using current measurement or use forward controlled velocity based mode.
#	0 Forward controlled mode, 1 Automatic scaling with current regulator
#driver_SGT: 0
#	This signed value controls the stallGuard2 threshold level for stall detection and sets the optimum
#	measurement range for readout. A lower value gives a higher sensitivity. Zero is the starting value
#	working with most motors. A higher value makes stallGuard2 less sensitive and requires more torque to indicate a stall.
#	0 indifferent value, +1… +63 less sensitivity, -1… -64 higher sensitivity

#   Set the given register during the configuration of the TMC2130
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag1_pin:
#   The micro-controller pin attached to the DIAG1 line of the TMC2130
#   chip. Setting this creates a "tmc2130_stepper_x:virtual_endstop"
#   virtual pin which may be used as the stepper's endstop_pin. Doing
#   this enables "sensorless homing". (Be sure to also set driver_SGT
#   to an appropriate sensitivity value.) The default is to not enable
#   sensorless homing. See docs/Sensorless_Homing.md for details on how
#   to configure this.

