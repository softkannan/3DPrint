# This file contains common pin mappings for the 2018 Creality
# Ender 3. To use this config, the firmware should be compiled for the
# AVR atmega1284p.

# Note, a number of Melzi boards are shipped with a bootloader that
# requires the following command to flash the board:
#  avrdude -p atmega1284p -c arduino -b 57600 -P /dev/ttyUSB0 -U out/klipper.elf.hex
# If the above command does not work and "make flash" does not work
# then one may need to flash a bootloader to the board - see the
# Klipper docs/Bootloaders.md file for more information.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino".
# Pin names may be preceded by an '!' to indicate that a reverse
# polarity should be used (eg, trigger on low instead of high). Input
# pins may be preceded by a '^' to indicate that a hardware pull-up
# resistor should be enabled for the pin.

# Custom thermistors (one may define any number of sections with a
# "thermistor" prefix). A custom thermistor may be used in the
# sensor_type field of a heater config section. (For example, if one
# defines a "[thermistor my_thermistor]" section then one may use a
# "sensor_type: my_thermistor" when defining a heater.) Be sure to
# place the thermistor section in the config file above its first use
# in a heater section.
[thermistor HT_NTC100K_Thermistor]
temperature1: 25.
resistance1: 100000.
temperature2: 150.
resistance2: 1770.
temperature3: 300.
resistance3: 105.6
#   Three resistance measurements (in Ohms) at the given temperatures
#   (in Celsius). The three measurements will be used to calculate the
#   Steinhart-Hart coefficients for the thermistor. These parameters
#   must be provided when using Steinhart-Hart to define the
#   thermistor.
#beta:
#   Alternatively, one may define temperature1, resistance1, and beta
#   to define the thermistor parameters. This parameter must be
#   provided when using "beta" to define the thermistor.
[thermistor HT_NTC100K_Thermistor_Beta]
temperature1: 25.
resistance1: 100000.
beta: 4100.
#   Other Internet based search values 4100., 4267., 4390., 4071.70
#   Alternatively, one may define temperature1, resistance1, and beta
#   to define the thermistor parameters. This parameter must be
#   provided when using "beta" to define the thermistor.

# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: PD7
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: !PC5
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PD6
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
step_distance: .0125 ; Marlin value was 80, divide 1 by Marlin value.
#   Distance in mm that each step causes the axis to travel. This
#   parameter must be provided.
endstop_pin: ^PC2
#   Endstop switch detection pin. This parameter must be provided for
#   the X, Y, and Z steppers on cartesian style printers.
position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: 0
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 235
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 25
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
#homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. The default
#   is 5mm.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_y]
step_pin: PC6
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: !PC7
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PD6
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
step_distance: .0125 ; Marlin value was 80, divide 1 by Marlin value.
#   Distance in mm that each step causes the axis to travel. This
#   parameter must be provided.
endstop_pin: ^PC3
#   Endstop switch detection pin. This parameter must be provided for
#   the X, Y, and Z steppers on cartesian style printers.
position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: 0
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 235
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 25
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
#homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. The default
#   is 5mm.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_z]
step_pin: PB3
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: PB2
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PA5
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
step_distance: .0025 ; Marlin value was 400, divide 1 by Marlin value.
#   Distance in mm that each step causes the axis to travel. This
#   parameter must be provided.
endstop_pin: ^PC4
#   Endstop switch detection pin. This parameter must be provided for
#   the X, Y, and Z steppers on cartesian style printers.
position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: 0.0
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 250
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#homing_speed: 25
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
#homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. The default
#   is 5mm.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.


# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: PB1
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: !PB0
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PD6
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
#step_distance: 0.01075268817204301075268817204301 ; Marlin value was 93, divide 1 by Marlin value.
#step_distance: 0.010750
step_distance: 0.010526
#   Distance in mm that each step causes the axis to travel. This
#   parameter must be provided.
nozzle_diameter: 0.500
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 1.750
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
#max_extrude_cross_section:
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
max_extrude_only_distance: 100.0
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
max_extrude_only_velocity:100.0
max_extrude_only_accel:500.0
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not place any limit on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would
#   have.
#pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
#pressure_advance_lookahead_time: 0.010
#   A time (in seconds) to "look ahead" at future extrusion moves when
#   calculating pressure advance. This is used to reduce the
#   application of pressure advance during cornering moves that would
#   otherwise cause retraction followed immediately by pressure
#   buildup. This setting only applies if pressure_advance is
#   non-zero. The default is 0.010 (10 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: PD5
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: HT_NTC100K_Thermistor
#sensor_type: EPCOS 100K B57560G104F
#   Type of sensor - this may be "EPCOS 100K B57560G104F", "ATC
#   Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
#   135-104LAG-J01", "NTC 100K MGB18-104F39050L32", "AD595", "PT100
#   INA826", "MAX6675", "MAX31855", "MAX31856", or "MAX31865".
#   Additional sensor types may be available - see the
#   example-extras.cfg file for details. This parameter must be
#   provided.
sensor_pin: PA7
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the
#   thermistor. This parameter is only valid when the sensor is a
#   thermistor. The default is 4700 ohms.
#adc_voltage: 5.0
#   The ADC comparison voltage. This parameter is only valid when the
#   sensor is an AD595 or "PT100 INA826". The default is 5 volts.
#smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
#control: pid
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
#pid_Kp: 24.935
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_Ki: 1.269
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID heaters.
#pid_Kd: 122.495
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
#pwm_cycle_time: 0.100
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
#min_extrude_temp: 170
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 0
max_temp: 255
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an
#   error. These parameters must be provided.

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
#pressure_advance: 0.050
#pressure_advance: 0.000
#pressure_advance_lookahead_time: 0.010

# Heater and temperature sensor verification. Heater verification is
# automatically enabled for each heater that is configured on the
# printer. Use verify_heater sections to change the default settings.
#[verify_heater heater_config_name]
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by when approaching a new target temperature. The default is 2.
#check_gain_time:
#   The amount of time (in seconds) that the heating_gain must be met
#   in before an error is raised. The default is 20 seconds for
#   extruders and 60 seconds for heater_bed.
#hysteresis: 5
#   The difference between the target temperature and the current
#   temperature for the heater to be considered within range of the
#   target temperature. The default is 5.
#max_error: 120
#   The maximum temperature difference a heater that falls outside the
#   target temperature range may accumulate before an error is
#   raised. For example, if the target temperature is 200, the
#   hysteresis is 5, the max_error is 120, and the temperature is
#   reported at 185 degrees for 12 seconds then an error would be
#   raised (or 24 seconds at 190, or 120 seconds at 194, etc.). The
#   default is 120.

[heater_bed]
heater_pin: PD4
#   PWM output pin controlling the heater. This parameter must be
#   provided.
sensor_type: EPCOS 100K B57560G104F
#   Type of sensor - this may be "EPCOS 100K B57560G104F", "ATC
#   Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
#   135-104LAG-J01", "NTC 100K MGB18-104F39050L32", "AD595", "PT100
#   INA826", "MAX6675", "MAX31855", "MAX31856", or "MAX31865".
#   Additional sensor types may be available - see the
#   example-extras.cfg file for details. This parameter must be
#   provided.
sensor_pin: PA6
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#control: pid
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
#pid_Kp: 64.153
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_Ki: 1.181
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_Kd: 870.883
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
min_temp: 0
max_temp: 110
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an
#   error. These parameters must be provided.

# Print cooling fan (omit section if fan not present).
[fan]
pin: PB4
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. The
#   default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when first enabling
#   it (helps get the fan spinning). The default is 0.100 seconds.

# Micro-controller information.
[mcu]
serial: /dev/ttyUSB0
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
#baud: 250000
#   The baud rate to use. The default is 250000.
#pin_map: arduino
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.
#restart_method:
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'rpi_usb', and
#   'command'. The 'arduino' method (toggle DTR) is common on Arduino
#   boards and clones. The 'rpi_usb' method is useful on Raspberry Pi
#   boards with micro-controllers powered over USB - it briefly
#   disables power to all USB ports to accomplish a micro-controller
#   reset. The 'command' method involves sending a Klipper command to
#   the micro-controller so that it can reset itself. The default is
#   'arduino' if the micro-controller communicates over a serial port,
#   'command' otherwise.

# The "auxboard" micro-controller will be used to control the heaters.
#[mcu auxboard]
#serial: /dev/ttyUSB1
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
#pin_map: arduino
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.

#[fan]
#pin: auxboard:ar9
#   PWM output pin controlling the fan. This parameter must be
#   provided.

# The printer section controls high level printer settings.

[printer]
kinematics: cartesian
#   This option must be "cartesian" for cartesian printers.
max_velocity: 180
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.
max_accel: 500
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.
#max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
max_z_velocity: 5
#   For cartesian printers this sets the maximum velocity (in mm/s) of
#   movement along the z axis. This setting can be used to restrict
#   the maximum speed of the z stepper motor on cartesian
#   printers. The default is to use max_velocity for max_z_velocity.
max_z_accel: 100
#   For cartesian printers this sets the maximum acceleration (in
#   mm/s^2) of movement along the z axis. It limits the acceleration
#   of the z stepper motor on cartesian printers. The default is to
#   use max_accel for max_z_accel.
#square_corner_velocity: 10.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.

# Support for a display attached to the micro-controller.
[display]
lcd_type: st7920
#   The type of LCD chip in use. This may be "hd44780" (which is
#   used in "RepRapDiscount 2004 Smart Controller" type displays),
#   "st7920" (which is used in "RepRapDiscount 12864 Full Graphic
#   Smart Controller" type displays) or "uc1701" (which is used in
#   "MKS Mini 12864" type displays). This parameter must be provided.
cs_pin: PA3
sclk_pin: PA1
sid_pin: PC1
#   The pins connected to an st7920 type lcd. These parameters must be
#   provided when using an st7920 display.
#menu_root:
#   Entry point for menu, root menu container name. If this parameter
#   is not provided then default menu root is used. When provided
#   menu entry is 'deck' type then it'll be initiated immediately at startup.
#   Description of menu items is located in example-menu.cfg file.
#menu_timeout:
#   Timeout for menu. Being inactive this amount of seconds will trigger
#   menu exit or return to root menu when having autorun enabled.
#   The default is 0 seconds (disabled)
encoder_pins: ^PD2, ^PD3
#   The pins connected to encoder. 2 pins must be provided when
#   using encoder. This parameter must be provided when using menu.
click_pin: ^!PC0
#   The pin connected to 'enter' button or encoder 'click'. This parameter
#   must be provided when using menu.

# Define the BLTouch servo
# Servos (one may define any number of sections with a "servo"
# prefix). The servos may be controlled using the SET_SERVO g-code
# command. For example: SET_SERVO SERVO=my_servo ANGLE=180
#[servo bltouch]
#pin: ar32
#   PWM output pin controlling the servo. This parameter must be
#   provided.
#maximum_servo_angle: 180
#   The maximum angle (in degrees) that this servo can be set to. The
#   default is 180 degrees.
#minimum_pulse_width: 0.0006
#   The minimum pulse width time (in seconds). This should correspond
#   with an angle of 0 degrees. The default is 0.001 seconds.
#maximum_pulse_width: 0.0024
#   The maximum pulse width time (in seconds). This should correspond
#   with an angle of maximum_servo_angle. The default is 0.002
#   seconds.
#initial_angle: 70
#   Initial angle to set the servo to when the mcu resets.  Must be between
#   0 and maximum_servo_angle  This parameter is optional.  If both
#   initial_angle and initial_pulse_width are set initial_angle will be used.
#initial_pulse_width: 0.0015
#   Initial pulse width time (in seconds) to set the servo to when
#   the mcu resets.  Must be between minimum_pulse_width and maximum_pulse_width.
#   This parameter is optional.  If both initial_angle and initial_pulse_width
#   are set initial_angle will be used
#enable: True
#   Enable or disable servo. It can be enabled or disabled later using
#   SET_SERVO SERVO=my_servo ENABLE=<0|1> g-command. The default is True (=enabled)

# Define a probe using the BLTouch
# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual "probe:z_virtual_endstop" pin. One
# may set the stepper_z endstop_pin to this virtual pin on cartesian
# style printers that use the probe in place of a z endstop. If using
# "probe:z_virtual_endstop" then do not define a position_endstop in
# the stepper_z config section.
#[probe]
#pin: ar30
#   Probe detection pin. This parameter must be provided.
#x_offset: 0.0
#   The distance (in mm) between the probe and the nozzle along the
#   x-axis. The default is 0.
#y_offset: 0.0
#   The distance (in mm) between the probe and the nozzle along the
#   y-axis. The default is 0.
#z_offset: 2.345
#   The distance (in mm) between the bed and the nozzle when the probe
#   triggers. This parameter must be provided.
#speed: 5.0
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
#activate_gcode:
#    SET_SERVO SERVO=bltouch ANGLE=10
#    SET_SERVO SERVO=bltouch ANGLE=60
#    G4 P200
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute prior to each probe attempt. This may be
#   useful if the probe needs to be activated in some way. Do not
#   issue any commands here that move the toolhead (eg, G1). The
#   default is to not run any special G-Code commands on activation.
#deactivate_gcode:
#    SET_SERVO SERVO=bltouch ANGLE=90
#    G4 P100
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute after each probe attempt completes. Do not
#   issue any commands here that move the toolhead. The default is to
#   not run any special G-Code commands on deactivation.

# BLTouch probe. One may define this section (instead of a probe
# section) to enable a BLTouch probe. A virtual
# "probe:z_virtual_endstop" pin is also created (see the "probe"
# section above for the details).
#[bltouch]
#sensor_pin:
#   Pin connected to the BLTouch sensor pin. This parameter must be
#   provided.
#control_pin:
#   Pin connected to the BLTouch control pin. This parameter must be
#   provided.
#pin_move_time:
#   The amount of time (in seconds) that it takes the BLTouch pin to
#   move up or down. The default is 0.200 seconds.
#x_offset:
#y_offset:
#z_offset:
#speed:
#   See the "probe" section for information on these parameters.

# Bed tilt compensation. One may define a [bed_tilt] config section to
# enable move transformations that account for a tilted bed.
#[bed_tilt]
#x_adjust: 0
#   The amount to add to each move's Z height for each mm on the X
#   axis. The default is 0.
#y_adjust: 0
#   The amount to add to each move's Z height for each mm on the Y
#   axis. The default is 0.
#z_adjust: 0
#   The amount to add to the Z height when the nozzle is nominally at
#   0,0. The default is 0.
# The remaining parameters control a BED_TILT_CALIBRATE extended
# g-code command that may be used to calibrate appropriate x and y
# adjustment parameters.
#points:
#    100,100
#    10,10
#    10,100
#    10,190
#    100,10
#    100,190
#    190,10
#    190,100
#    190,190
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a BED_TILT_CALIBRATE
#   command. Specify coordinates of the nozzle and be sure the probe
#   is above the bed at the given nozzle coordinates. The default is
#   to not enable the command.
#speed: 50
#   The speed (in mm/s) of non-probing moves during the
#   calibration. The default is 50.
#horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
#samples: 1
#   The number of times to probe each point.  The probed z-values
#   will be averaged.  The default is to probe 1 time.
#sample_retract_dist: 2.0
#   The distance (in mm) to retract between each sample if
#   sampling more than once.  Default is 2mm.

# Mesh Bed Leveling. One may define a [bed_mesh] config section
# to enable move transformations that offset the z axis based
# on a mesh generated from probed points. Note that bed_mesh
# and bed_tilt are incompatible, both cannot be defined.  When
# using a probe to home the z-axis, it is recommended to define
# a [homing_override] section in printer.cfg to home toward the
# center of the print area.
#[bed_mesh]
#speed: 50
#   The speed (in mm/s) of non-probing moves during the
#   calibration. The default is 50.
#horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
#samples: 1
#   The number of times to probe each point.  The probed z-values
#   will be averaged.  The default is to probe 1 time.
#sample_retract_dist: 2.0
#   The distance (in mm) to retract between each sample if
#   sampling more than once.  Default is 2mm.
#min_point:
#   An X,Y point defining the minimum coordinate to probe on
#   the bed. Note that this refers to the nozzle position,
#   and take care that you do not define a point that will move
#   the probe off of the bed. This parameter must be provided.
#max_point:
#   An X,Y point defining the maximum coordinate to probe on
#   the bed. Follow the same precautions as listed in min_point.
#   Also note that this does not necessarily define the last point
#   probed, only the maximum coordinate. This parameter must be provided.
#probe_count: 3,3
#   A comma separated pair of integer values (X,Y) defining the number
#   of points to probe along each axis. A single value is also valid,
#   in which case that value will be for both axes. Default is 3,3
#   which probes a 3x3 grid.
#fade_start: 1.0
#   The gcode z position in which to start phasing out z-adjustment
#   when fade is enabled.  Default is 1.0.
#fade_end: 0.0
#   The gcode z position in which phasing out completes.  When set
#   to a value below fade_start, fade is disabled. It should be
#   noted that fade may add unwanted scaling along the z-axis of a
#   print.  If a user wishes to enable fade, a value of 10.0 is
#   recommended. Default is 0.0, which disables fade.
#fade_target:
#   The z position in which fade should converge. When this value is set
#   to a non-zero value it must be within the range of z-values in the mesh.
#   Users that wish to converge to the z homing position should set this to 0.
#   Default is the average z value of the mesh.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will
#   trigger a split. Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
#mesh_pps: 2,2
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point. The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
#algorithm: lagrange
#   The interpolation algorithm to use. May be either "lagrange"
#   or "bicubic". This option will not affect 3x3 grids, which
#   are forced to use lagrange sampling.  Default is lagrange.
#bicubic_tension: .2
#   When using the bicubic algorithm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.

# If the BLTouch is used to home the Z axis, then define a
# homing_override section, use probe:z_virtual_endstop as the
# endstop_pin in the stepper_z section, and do not set
# position_endstop in the stepper_z section.
# Homing override. One may use this mechanism to run a series of
# g-code commands in place of a G28 found in the normal g-code input.
# This may be useful on printers that require a specific procedure to
# home the machine.
#[homing_override]
#gcode:
#    ; G90   ; Uncomment these 2 lines to blindly lift the Z 2mm at start
#    ; G1 Z7 F600
#    G28 X0 Y0
#    G1 X100 Y100 F3600
#    G28 Z0
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute in place of G28 commands found in the normal
#   g-code input. If a G28 is contained in this list of commands then
#   it will invoke the normal homing procedure for the printer. The
#   commands listed here must home all axes. This parameter must be
#   provided.
#axes: z
#   The axes to override. For example, if this is set to "z" then the
#   override script will only be run when the z axis is homed (eg, via
#   a "G28" or "G28 Z0" command). Note, the override script should
#   still home all axes. The default is "xyz" which causes the
#   override script to be run in place of all G28 commands.
#set_position_x:
#set_position_y:
#set_position_z: 5
#   If specified, the printer will assume the axis is at the specified
#   position prior to running the above g-code commands. Setting this
#   disables homing checks for that axis. This may be useful if the
#   head must move prior to invoking the normal G28 mechanism for an
#   axis. The default is to not force a position for an axis.



# G-Code macros (one may define any number of sections with a
# "gcode_macro" prefix).
#[gcode_macro my_cmd]
#gcode:
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute in place of "my_cmd". This parameter is
#   evaluated using Python "string format syntax" with the command
#   parameters as named arguments. For example, if one were to define
#   a macro MY_DELAY with gcode "G4 P{DELAY}" then the command
#   "MY_DELAY DELAY=100" would evaluate to "G4 P100". This parameter
#   must be provided.
#default_parameter_<parameter>:
#   One may define any number of options with a "default_parameter_"
#   prefix. Use this to define default values for g-code parameters.
#   For example, if one were to define the macro MY_DELAY with gcode
#   "G4 P{DELAY}" along with "default_parameter_DELAY = 50" then the
#   command "MY_DELAY" would evaluate to "G4 P50". The default is to
#   require that all parameters used in the gcode script be present in
#   the command invoking the macro.


# M300 : Play tone, Beeper support, as commonly found on usual LCD displays
# i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount 12864 Full Graphic
# This defines a custom I/O pin and a custom GCODE macro
# Usage: M300 [P<ms>] [S<Hz>]      P is the tone duration, S the tone frequency.
# as it is based on a PWM duty cycle, the frequency won't be pitch perfect.
#
#[output_pin BEEPER_pin]
#pin: ar37
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
#pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
#value: 0
#   Silent at power on, set to 1 if active low.
#shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
#cycle_time: 0.001
#   PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
#scale: 1000
#   PWM parameter will be in the range of (0-1000 Hz).
#   Although not pitch perfect.
#

# Enable the "M118" and "RESPOND" extended commands.
[respond]
# default_type: echo
#    Sets the default prefix of the "M118" and "RESPOND" output to one of
#    the following:
#        echo: "echo: " (This is the default)
#        command: "// "
#        error: "!! "
# default_prefix: echo:
#    Directly sets the default prefix. If present, this value will override
#    the "default_type".

#[gcode_macro M300]
#default_parameter_S=1000
#   Allows for a default 1kHz tone if S is omitted
#default_parameter_P=100
#   Allows for a default 10ms duration is P is omitted
#gcode:  SET_PIN PIN=BEEPER_pin VALUE={S}
#        G4 P{P}
#        SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro M300]
gcode:
  M118 M300
[gcode_macro M201]
gcode:
	M118 M201;
[gcode_macro M202]
gcode:
	M118 M202;
[gcode_macro M203]
gcode:
	M118 M203;
[gcode_macro M205]
gcode:
	M118 M205;
[gcode_macro M900]
gcode:
	M118 M900;
[gcode_macro M108]
gcode:
	M118 M108;
[gcode_macro M420]
gcode:
	M118 M420;
[gcode_macro G29]
gcode:
	M118 G29;

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.234
#*# pid_ki = 0.925
#*# pid_kd = 121.832
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 70.589
#*# pid_ki = 1.426
#*# pid_kd = 873.540
