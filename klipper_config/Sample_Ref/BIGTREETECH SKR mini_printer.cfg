# This file contains common pin mappings for the BIGTREETECH SKR mini
# MZ v1.0. To use this config, the firmware should be compiled for the
# STM32F103 with a "28KiB bootloader" and USB communication. Also,
# select "Enable extra low-level configuration options" and configure
# "GPIO pins to set at micro-controller startup" to "!PA14".

# The "make flash" command does not work on the SKR mini MZ. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini MZ with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: This board has a design flaw in its thermistor circuits that
# cause inaccurate temperatures (most noticeable at low temperatures).

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_min: -8
position_endstop: -7
position_max: 235
homing_speed: 70
second_homing_speed: 20
###50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_min: -5
position_endstop: -5
position_max: 225
homing_speed: 70 
second_homing_speed: 20
###50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
##position_endstop: 0.0
position_max: 250
position_min: -7

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

#################################################################
[bltouch]
sensor_pin: ^PC2
control_pin: PA1
x_offset: -45.0
y_offset: -0
z_offset: 3.40
###speed: 2 oppure 3
speed: 2.0 

#1 test per point, if you want 2, change 1 with 2
samples: 1

sample_retract_dist: 2.0
probe_with_touch_mode: True

########################################################################################

[safe_z_home]
home_xy_position: 157, 116
speed: 75
z_hop: 5
z_hop_speed: 15.0

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD2
microsteps: 16

###################
#for my BMG direct drive extruder is ok!
rotation_distance: 7.68464817905664
###rotation_distance: 7.7

###################

nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0

##########################################################################################
pressure_advance: 0.09
###pressure_advance: 0.118 ###0.05

control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 250
min_extrude_temp: 185

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 999999

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC3
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[heater_fan nozzle_cooling_fan]
pin: PC7
heater_temp: 50.0

[fan]
pin: PC6

##################################################################################################################################
[mcu]
###serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_30FFD9054255353815590957-if00
serial:/dev/ttyACM0
baud: 250000

[mcu rpi]
serial: /tmp/klipper_host_mcu
[adxl345]
cs_pin: rpi:None
[resonance_tester]
accel_chip: adxl345
accel_per_hz:  75
probe_points:
    115, 116, 20


###[adxl345 hotend]
###cs_pin: rpi:None
###[adxl345 bed]
###cs_pin: rpi:gpio25
###[resonance_tester]
###accel_chip_x: adxl345 hotend
###accel_chip_y: adxl345 bed
###probe_points:
###    115, 116, 20

###[output_pin caselight]
###pin: rpi:gpio20 

######################################################################################################################################

[neopixel neopixel]
pin: PA8   
chain_count: 16
color_order: GRB
initial_RED: 0.25
initial_GREEN: 0.25
initial_BLUE: 0.25

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_accel_to_decel: 2000
max_z_velocity: 25
max_z_accel: 100
square_corner_velocity: 5.0
    
[input_shaper]

shaper_freq_x: 52.8
shaper_type_x: ei

shaper_freq_y: 39.0
shaper_type_y: 2hump_ei


[virtual_sdcard]
path: /home/pi/sdcard

[firmware_retraction]
retract_speed: 70
retract_length: 0.5
###unretract_extra_length: 0.00
unretract_speed: 70

 

### BEDLEVEL    
[bed_mesh]
speed: 150

###horizontal_move_z: 8
horizontal_move_z: 5

mesh_min: 8,10
mesh_max: 180,210
###algorithm: bicubic
algorithm: lagrange

#4x4 grid for auto4x4 grid for auto leveling with bltouch
probe_count: 4,4
fade_start: 1.0
mesh_pps: 1,1

[bed_screws]
screw1: 25,25
screw2: 205,25
screw3: 205,200
screw4: 25,200
###
###############################################################################################################



###############################################################################################################





[gcode_macro G29]
gcode:
#######################################
    BLTOUCH_DEBUG COMMAND=reset ###########
    BED_MESH_CALIBRATE             ####
#######################################
#    BED_MESH_CLEAR
#    BED_MESH_CALIBRATE
#    BED_MESH_PROFILE SAVE=default
#    BED_MESH_PROFILE LOAD=default
#######################################

[display_status]


[static_digital_output usb_pullup_enable]
pins: !PA14

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5, EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

[save_variables]
filename:~/variables.cfg

[gcode_macro global]
variable_r: 0.4
variable_g: 0.4
variable_b: 0.4
variable_w: 0.4
variable_true: 0
gcode:
  M117 Carico variabili ; must provide something
  
[gcode_macro testmacro]
gcode:
  M117 carico le variabili.....
  SET_GCODE_VARIABLE MACRO=global VARIABLE=r VALUE={printer.save_variables.variables.r}
  SET_GCODE_VARIABLE MACRO=global VARIABLE=g VALUE={printer.save_variables.variables.g}
  SET_GCODE_VARIABLE MACRO=global VARIABLE=b VALUE={printer.save_variables.variables.b}
  SET_GCODE_VARIABLE MACRO=global VARIABLE=w VALUE={printer.save_variables.variables.w}

  SET_LED LED=neopixel RED={printer.save_variables.variables.r} GREEN={printer.save_variables.variables.g} BLUE={printer.save_variables.variables.b}  ###SYNC=0 
  M118 carico le variabili.....
  M118 {printer["gcode_macro global"].r}
  M118 {printer["gcode_macro global"].g}
  M118 {printer["gcode_macro global"].b}
  M118 {printer["gcode_macro global"].w}


[gcode_macro M105]
rename_existing: M105.1
gcode:  
  M105.1
  {% if printer["gcode_macro global"].true == 0 %}
    M117 carico le variabili.....
    SET_GCODE_VARIABLE MACRO=global VARIABLE=r VALUE={printer.save_variables.variables.r}
    SET_GCODE_VARIABLE MACRO=global VARIABLE=g VALUE={printer.save_variables.variables.g}
    SET_GCODE_VARIABLE MACRO=global VARIABLE=b VALUE={printer.save_variables.variables.b}
    SET_GCODE_VARIABLE MACRO=global VARIABLE=w VALUE={printer.save_variables.variables.w}
    SET_LED LED=neopixel RED={printer.save_variables.variables.r} GREEN={printer.save_variables.variables.g} BLUE={printer.save_variables.variables.b}  SYNC=0 
    M118 carico le variabili.....
    SET_GCODE_VARIABLE MACRO=global VARIABLE=true VALUE=1
    G4 P3000
    M21
    M117 Pronta . . .
  {% endif %}

[respond]
#default_type = command
default_type: echo

#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[gcode_macro set_led_red]
gcode:
  SET_LED LED=neopixel RED={printer.save_variables.variables.r} GREEN=0.0 BLUE=0.0  SYNC=0 

[gcode_macro set_led_green]
gcode:
  SET_LED LED=neopixel RED=0.0 GREEN={printer.save_variables.variables.g} BLUE=0.0  SYNC=0 

[gcode_macro set_led_blue]
gcode:
  SET_LED LED=neopixel RED=0.0 GREEN=0.0 BLUE={printer.save_variables.variables.b}  SYNC=0 

[gcode_macro set_led_yellow]
gcode:
  SET_LED LED=neopixel RED={printer.save_variables.variables.r} GREEN={printer.save_variables.variables.g} BLUE=0.0  SYNC=0

[gcode_macro set_led_ciano]
gcode:
  SET_LED LED=neopixel RED=0.0 GREEN={printer.save_variables.variables.g} BLUE={printer.save_variables.variables.b}  SYNC=0 

[gcode_macro set_led_magenta]
gcode:
  SET_LED LED=neopixel RED={printer.save_variables.variables.r} GREEN=0.0 BLUE={printer.save_variables.variables.b}  SYNC=0 


[gcode_macro set_led_white]
gcode:
  SET_LED LED=neopixel RED={printer.save_variables.variables.w} GREEN={printer.save_variables.variables.w} BLUE={printer.save_variables.variables.w}  SYNC=0 


########################################################################################################
########################################################################################################
########################################################################################################
### menu main ###
[menu __main]
type: list
name: Menu'

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Regolare

[menu __main __tune __speed]
type: input
name: Velocita': {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flusso: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type: input
name: Z Offset:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1


### menu octoprint ###
[menu __main __octoprint]
type: list
name: OctoPrint

[menu __main __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Stoppa Stampa
gcode:
    {action_respond_info('action:pause')}

[menu __main __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Riprendi Stampa
gcode:
    {action_respond_info('action:resume')}

[menu __main __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Cancella Stampa
gcode:
    {action_respond_info('action:cancel')}

### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: SD Card

[menu __main __sdcard __start]
type: command
enable: {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path}
name: Inizia Stampa da SD
gcode: M24

[menu __main __sdcard __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Riprendi Stampa da SD
gcode:
    {% if "pause_resume" in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu __main __sdcard __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Stoppa Stampa da SD
gcode:
    {% if "pause_resume" in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}

[menu __main __sdcard __cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Cancella Stampa da SD
gcode:
    {% if 'pause_resume' in printer %}
        CANCEL_PRINT
    {% else %}
        M25
        M27
        M26 S0
        TURN_OFF_HEATERS
        {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
            G91
            G0 Z5 F1000
            G90
        {% endif %}
    {% endif %}

### menu control ###
[menu __main __control]
type: list
name: Controlli

[menu __main __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home
gcode: G28

[menu __main __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __main __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __main __control __disable]
type: command
name: Sblocca Steppers
gcode:
    M84
    M18

[menu __main __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Ventola: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Velocita': {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

###########################################################################################################################
[menu __main __control __caselightonoff]
type: list
enable: true 
name: Luci 
  
[menu __main __control __caselightonoff __red]
type: input
enable: true
name: Rosso: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].r}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=r VALUE={menu.input}    ###{printer.heater_bed.target}
    SET_LED LED=neopixel RED={menu.input} GREEN={printer["gcode_macro global"].g} BLUE={printer["gcode_macro global"].b} 
    SAVE_VARIABLE VARIABLE=r VALUE={menu.input}

[menu __main __control __caselightonoff __green]
type: input
enable: true
name: Verde: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].g}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=g VALUE={menu.input}    ###{printer.heater_bed.target}
    SET_LED LED=neopixel RED={printer["gcode_macro global"].r} GREEN={menu.input} BLUE={printer["gcode_macro global"].b} 
    SAVE_VARIABLE VARIABLE=g VALUE={menu.input}

[menu __main __control __caselightonoff __blue]
type: input
enable: true
name: Blu: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].b}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=b VALUE={menu.input}    
    SET_LED LED=neopixel RED={printer["gcode_macro global"].r} GREEN={printer["gcode_macro global"].g}  BLUE={menu.input}
    SAVE_VARIABLE VARIABLE=b VALUE={menu.input}

[menu __main __control __caselightonoff __white]
type: input
enable: true
name: Bianco: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro global"].w}
input_min: 0
input_max: 1
input_step: 0.01
gcode: 
    SET_GCODE_VARIABLE MACRO=global VARIABLE=w VALUE={menu.input}    
    SET_LED LED=neopixel RED={menu.input} GREEN={menu.input}  BLUE={menu.input}
    SAVE_VARIABLE VARIABLE=w VALUE={menu.input}


###########################################################################################################################
### menu move 10mm ###
[menu __main __control __move_10mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi 10mm

[menu __main __control __move_10mm __axis_x]
type: input
name: Muovi X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Muovi Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Estrusore:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Muovi X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Muovi Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Estrusore:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Muovi X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Muovi Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Muovi Estrusore:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __main __temp]
type: list
name: Temperatura

[menu __main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __temp __hotend1_target]
type: input
enable: {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __temp __preheat_pla]
type: list
name: Preriscalda PLA

[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S60
    M104 S195

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S195

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S60

[menu __main __temp __preheat_abs]
type: list
name: Preriscalda PETG

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S70
    M104 S230

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S230

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S70

###############################################
[menu __main __temp __preheat_abs1]
type: list
name: Preriscalda TPU

[menu __main __temp __preheat_abs1 __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S75
    M104 S230

[menu __main __temp __preheat_abs1 __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S230

[menu __main __temp __preheat_abs1 __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S75

[menu __main __temp __preheat_abs2]
type: list
name: Preriscalda ABS

[menu __main __temp __preheat_abs2 __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preriscalda tutto
gcode:
    M140 S95
    M104 S250

[menu __main __temp __preheat_abs2 __hotend]
type: command
enable: {'extruder' in printer}
name: Preriscalda hotend
gcode: M104 S250

[menu __main __temp __preheat_abs2 __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preriscalda bed
gcode: M140 S95

###############################################

[menu __main __temp __cooldown]
type: list
name: Raffredda

[menu __main __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Raffredda tutto
gcode:
    M104 S0
    M140 S0

[menu __main __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Raffredda hotend
gcode: M104 S0

[menu __main __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Raffredda bed
gcode: M140 S0

### menu filament ###

[menu __main __filament]
type: list
name: Cambio Filamento

[menu __main __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type: command
name: Carica veloce
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type: command
name: Carica lento
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type: command
name: Scarica Veloce
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type: command
name: Scarica lento
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadsx]
type: command
name: Ferma Filamento
gcode:
    G1 E0 F240

[menu __main __filament __feed]
type: input
name: Alimenta: {'%.1f' % menu.input}
input: 5
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F60
    RESTORE_GCODE_STATE NAME=__filament__load

### menu setup ###
[menu __main __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __main __setup __save_config]
type: command
name: Salva config
gcode: SAVE_CONFIG

[menu __main __setup __restart]
type: list
name: Riavvia Stampante

[menu __main __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Riavvia host
gcode: RESTART

[menu __main __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Riavvia Firmware
gcode: FIRMWARE_RESTART

[menu __main __setup __tuning]
type: list
name: Calibra PID

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Calibra PID Hotend
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Calibra PID bed
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type: list
name: Calibrazioni

[menu __main __setup __calib __delta_calib_auto]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: cal. Delta auto
gcode:
    G28
    DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: cal. Delta man

[menu __main __setup __calib __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Probe Bed
gcode: PROBE

[menu __main __setup __calib __delta_calib_man __start]
type: command
name: Avvia probing
gcode:
    G28
    DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type: input
name: Muovi Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type: command
name: Accetta
gcode: ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type: command
name: Annulla
gcode: ABORT

[menu __main __setup __dump]
type: command
name: Parametri di Dump
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

########################################################################################################
########################################################################################################
########################################################################################################
 
#######################################################################
 
 





[pause_resume]
recover_velocity: 65 #allows pause resume functionality.

[filament_switch_sensor filament_sensor]
switch_pin: !PC15
pause_on_runout: True

#######################################################################

runout_gcode:
  M117 Filamento Terminato...
  M600
insert_gcode:
  M117 Filamento Inserito... #just a throwaway GCode command to have something in this space. You can add your own.
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
event_delay: 3.0
pause_delay: 0.0001


[gcode_macro M600]
gcode:
  PAUSE_MACRO
  UNLOAD


#Below Macro with credit to Hywel Martin #https://github.com/KevinOConnor/klipper/issues/1354
[gcode_macro PARK_MACRO]
default_parameter_X: 0
default_parameter_Y: 0
default_parameter_Z: 30
gcode:
  M117 Parcheggio Estrusore...
  G91
  G1 E-5 F500
  G1 Z{Z}
  G90
  G1 X{X} Y{Y} F3000


[gcode_macro UNLOAD]
gcode:
  M117 Espello Filamento restante...
  G91
  G1 E-30.0 F250
  G1 E-50 F500
  G90


[gcode_macro PAUSE_MACRO]
gcode:
  PAUSE
  PARK_MACRO
  ###SET_IDLE_TIMEOUT TIMEOUT=7200

[gcode_macro PURGE]
gcode:
  M117 Spurgo Filamento...
  G91
  G1 E10.0 F250
  G90

[gcode_macro LOAD_FILAMENT]
gcode:
  M117  Carico filamento...
  G91
  G1 E20.0 F100
  G4 P1000
  G1 E50.0 F250
  G1 E20.0 F250
  G90

[gcode_macro RESUME_MACRO]
gcode:
  M117  Riprendo la Stampa...
  RESUME
#######################################################################


#######################################################################

### menu cambiofilament ###

###[menu __main __cambiofilament]
###type: list
###name: Cambio Filamento

#########################
######submenus###########

[menu __main __filament __test1]
type:command
name: Pausa x Cambio Filamento
gcode:
    M600

[menu __main __filament __test2]
type:command
name: Carica Filamento
gcode:
    LOAD_FILAMENT

[menu __main __filament __test3]
type:command
name: Spurga Filamento
gcode:
    PURGE

[menu __main __filament __test4]
type:command
name: Riprendi Stampa
gcode:
    RESUME_MACRO

###################################dISPLAY#########################################
###################################################################################
###################################################################################
######################################################################
# Helper macros for showing common screen values
######################################################################

[display_template _heater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_template _fan_speed]
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_template _printing_time]
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    Pronta...
  {% endif %}


######################################################################
# Default 16x4 display
######################################################################

[display_data _default_16x4 extruder]
position: 0, 0
text:
  {% set active_extruder = printer.toolhead.extruder %}
  { render("_heater_temperature", param_heater_name=active_extruder) }

[display_data _default_16x4 fan]
position: 0, 10
text: { render("_fan_speed") }

[display_data _default_16x4 heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _default_16x4 speed_factor]
position: 1, 10
text:
  ~feedrate~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }

[display_data _default_16x4 print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }
[display_data _default_16x4 progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer.display_status.progress) }

[display_data _default_16x4 printing_time]
position: 2, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data _default_16x4 print_status]
position: 3, 0
text: { render("_print_status") }


 

 

######################################################################
# Default 16x4 glyphs
######################################################################

[display_glyph extruder]
data:
  ................
  ................
  ..************..
  .....******.....
  ..************..
  .....******.....
  ..************..
  ................
  ....********....
  ....******.*....
  ....********....
  ................
  ......****......
  .......**.......
  ................
  ................

[display_glyph bed]
data:
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ...*********....
  ..*.........*...
  .*************..
  ................
  ................

[display_glyph bed_heat1]
data:
  ................
  ................
  ..*....*....*...
  .*....*....*....
  ..*....*....*...
  ...*....*....*..
  ..*....*....*...
  .*....*....*....
  ..*....*....*...
  ................
  ................
  ...*********....
  ..*.........*...
  .*************..
  ................
  ................

[display_glyph bed_heat2]
data:
  ................
  ................
  ..*....*....*...
  ...*....*....*..
  ..*....*....*...
  .*....*....*....
  ..*....*....*...
  ...*....*....*..
  ..*....*....*...
  ................
  ................
  ...*********....
  ..*.........*...
  .*************..
  ................
  ................

[display_glyph fan1]
data:
  ................
  ................
  ....***.........
  ...****....**...
  ...****...****..
  ....***..*****..
  .....*....****..
  .......**.......
  .......**.......
  ..****....*.....
  ..*****..***....
  ..****...****...
  ...**....****...
  .........***....
  ................
  ................

[display_glyph fan2]
data:
  ................
  ................
  .......****.....
  .......****.....
  .......***......
  ..**...**.......
  ..***...........
  ..****.**.****..
  ..****.**.****..
  ...........***..
  .......**...**..
  ......***.......
  .....****.......
  .....****.......
  ................
  ................

[display_glyph feedrate]
data:
  ................
  ................
  ***.***.***.**..
  *...*...*...*.*.
  **..**..**..*.*.
  *...*...*...*.*.
  *...***.***.**..
  ................
  **...*..***.***.
  *.*.*.*..*..*...
  **..***..*..**..
  *.*.*.*..*..*...
  *.*.*.*..*..***.
  ................
  ................
  ................

# In addition to the above glyphs, 16x4 displays also have the
# following hard-coded single character glyphs: right_arrow, degrees.

 
###tension = 0.2
###################################################################################
###################################################################################

#######################################################################
